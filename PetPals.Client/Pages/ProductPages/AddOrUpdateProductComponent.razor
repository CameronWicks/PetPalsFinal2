@page "/add-product"
@implements IDisposable


<div class="container justify-content-center">
    <div class="row justify-content-center ">
        <div class="col-md-6 justify-content-center">
            <EditForm Model="MyProduct" Enhance OnValidSubmit="HandleSaveProduct">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                 <div class="card justify-content-center">
                     <div class="card-header justify-content-center">Add Product</div>
                     <div class="card-body justify-content-center">
                        <div class="form-group">
                            <label class="form-label"> Name</label>
                            <InputText @bind-Value="MyProduct.Name" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <label class="form-label"> Select Category</label>
                            @if (CategoryService.AllCategories is not null)
                            {
                                <InputSelect class="form-select form-control-sm" @bind-Value="@MyProduct.CategoryId">
                                    <option selected>Select Category</option>
                                    @foreach (var category in CategoryService.AllCategories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </InputSelect>
                            }
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label"> Price</label>
                            <InputNumber @bind-Value="MyProduct.Price" class="form-control"></InputNumber>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label"> Quantity</label>
                            <InputNumber @bind-Value="MyProduct.Quantity" class="form-control"></InputNumber>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label"> Description</label>
                            <InputTextArea @bind-Value="MyProduct.Description" class="form-control" ></InputTextArea>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label @(ImageUploadMessage == ""?"":"text-danger")">
                                @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                            </label>
                            <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="form-group mt-3">
                            @if (messageDialogService.ShowSaveButton)
                            {
                                <button type="submit" class="btn btn-outline-primary"> <i class="fa fa-plus"></i> Save Product</button>
                            }
                            <BusyButtonComponent ShowBusyButton="messageDialogService.ShowBusyButton"></BusyButtonComponent>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>
<div class="container-fluid bg-dark text-white-50 py-4 sticky-bottom">
    <div class="container">
        <div class="row g-5">
            <div class="col-md-6 text-center text-md-start">
                <p class="mb-md-0">&copy;   All Rights Reserved.</p>
            </div>
            <div class="col-md-6 text-center text-md-end">
                <p class="mb-0">Designed by Cameron Wicks</p>
            </div>
        </div>
    </div>
</div>

@code {
    Product MyProduct = new();
    string ImageUploadMessage = "";
    protected async override Task OnInitializedAsync()
    {
        await CategoryService.GetAllCategories();
        CategoryService.CategoryAction += StateHasChanged;
        messageDialogService.Action += StateHasChanged;

    }
    async Task HandleSaveProduct()
    {
        messageDialogService.ShowSaveButton = false;
        messageDialogService.ShowBusyButton = !messageDialogService.ShowSaveButton;
        if (string.IsNullOrEmpty(MyProduct.Base64Img))
        {
            messageDialogService.messageDialog!.SetDialogValues("warning", "You need to choose image");
            messageDialogService.SetMessageDialog();
            return;
        }

        var (flag, message) = await ProductService.AddProduct(MyProduct);
        if (flag)
            messageDialogService.messageDialog!.SetDialogValues("Success, Item has been added", message);
        else
            messageDialogService.messageDialog!.SetDialogValues("A Error has occured", message);

        messageDialogService.SetMessageDialog();
        return;
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            MyProduct.Base64Img = imageData;
            imageData = "";
            return;
        }
        ImageUploadMessage = "PNG file needed.";
        return;
    }

    public void Dispose()
    {
        CategoryService.CategoryAction -= StateHasChanged;
        messageDialogService.Action -= StateHasChanged;
    }
}
