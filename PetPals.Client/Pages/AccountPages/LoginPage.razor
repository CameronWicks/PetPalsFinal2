@page "/identity/account/login"
@implements IDisposable
@using PetPals.Client.Authentication
<div class="container-fluid justify-content-center">
    <div class="row justify-content-center">
        <div class="col-lg-6 justify-content-center">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                 <DataAnnotationsValidator />
                 <ValidationSummary />
                 <div class="card justify-content-center">
                     <div class="card-header justify-content-center">LOGIN</div>
                     <div class="card-body justify-content-center">
                         <div class="form-group mt-3">
                             <label class="form-label">Email</label>
                             <InputText @bind-Value="User.Email" class="form-control" id="floatingInput"></InputText>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Password</label>
                             <input type="password" @bind="User.Password" class="form-control" id="floatingInput"></input>
                         </div>
                         <div class="form-group mt-3">
                             @if (messageDialogService.ShowSaveButton)
                            {
                                <button class="btn btn-primary btn-lg btn-block justify-content-center" type="submit">Login</button>
                            }
                            <BusyButtonComponent ShowBusyButton="messageDialogService.ShowBusyButton"></BusyButtonComponent>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>



@code {
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    LoginDTO User = new();
    async Task HandleLogin()
    {
        var result = await accountService.Login(User);
        messageDialogService.ShowSaveButton = false;
        messageDialogService.ShowBusyButton = !messageDialogService.ShowSaveButton;
        if (result.Flag)
        {
            messageDialogService.messageDialog!.SetDialogValues("success", result.Message);
            messageDialogService.SetMessageDialog();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new TokenProp()
            { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
